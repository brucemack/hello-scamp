/*
SCAMP Encoder/Decoder
Copyright (C) 2023 - Bruce MacKinnon KC1FSZ

This program is free software: you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free 
Software Foundation, either version 3 of the License, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program. If not, see <https://www.gnu.org/licenses/>.
*/
#include <fstream>
#include <cmath>
#include <string>
#include <cassert>

#include "Util.h"
#include "Symbol6.h"
#include "CodeWord24.h"
#include "Frame30.h"
#include "FileModulator.h"
#include "TestModem.h"
#include "TestModem2.h"
#include "FileModulator.h"
#include "ClockRecoveryPLL.h"
#include "fixed_math.h"
#include "fixed_fft.h"

using namespace std;
using namespace scamp;

const float PI = 3.1415926f;

const unsigned int sampleFreq = 32000;
const float secondsPerSample = 1.0 / (float)sampleFreq;
const unsigned int samplesPerSymbol = (60 * sampleFreq) / 2000;
const unsigned int S = 34 * 30 * samplesPerSymbol;

static float samples[S];
static unsigned int sampleCount = 0;

static float downSamples[S];
static unsigned int downSampleCount = 0;

int main(int argc, const char** argv) {

    // Load file and normalize
    ifstream infile("demo/AK1WI-SCAMP-40m.txt");
    std::string line;

    sampleCount = 0;
    while (std::getline(infile, line)) {
        float sample = std::stof(line);
        samples[sampleCount++] = sample / 32000.0;
        assert(sampleCount < S);
    }

    // Filter with 1,000 Hz cut-off
    float h[] = {
        -0.000136733551123474,
        -0.000153097339934155,
        -0.000164168386245181,
        -0.000169475695999539,
        -0.000168687654090666,
        -0.000161626077782218,
        -0.000148279947657231,
        -0.000128818158707271,
        -0.000103600360887381,
        -0.000073184733227011,
        -0.000038331382782603,
        0.000000000000000000,
        0.000040659549186593,
        0.000082324848110496,
        0.000123527639790934,
        0.000162690094940290,
        0.000198170615150148,
        0.000228318579312604,
        0.000251536825581370,
        0.000266350033569904,
        0.000271476570048707,
        0.000265900825810743,
        0.000248942640707194,
        0.000220320124299626,
        0.000180202062131893,
        0.000129246175997619,
        0.000068619795333542,
        0.000000000000000000,
        -0.000074448995301896,
        -0.000152122547287316,
        -0.000230046659486877,
        -0.000304972536819003,
        -0.000373492497407117,
        -0.000432173882488592,
        -0.000477706425647339,
        -0.000507057485130843,
        -0.000517628670667054,
        -0.000507406767087876,
        -0.000475101521175321,
        -0.000420262854291120,
        -0.000343370416539428,
        -0.000245889117540503,
        -0.000130285346110805,
        0.000000000000000001,
        0.000140623856733193,
        0.000286458967915836,
        0.000431755675842870,
        0.000570343575108129,
        0.000695866971189180,
        0.000802046113142231,
        0.000882954431367312,
        0.000933300602487195,
        0.000948703270084565,
        0.000925945744341798,
        0.000863198039210445,
        0.000760194214492156,
        0.000618354179571175,
        0.000440840866811561,
        0.000232545950468093,
        -0.000000000000000001,
        -0.000248793980562996,
        -0.000504601379611033,
        -0.000757265527998974,
        -0.000996076978507558,
        -0.001210190367073161,
        -0.001389073900754880,
        -0.001522974199559373,
        -0.001603377519727205,
        -0.001623447413179942,
        -0.001578418713511394,
        -0.001465928433965473,
        -0.001286265733142097,
        -0.001042525528293657,
        -0.000740653554486259,
        -0.000389374583756716,
        0.000000000000000001,
        0.000413884189792075,
        0.000836842726790482,
        0.001252118562650433,
        0.001642246217551686,
        0.001989730358690072,
        0.002277765077871209,
        0.002490966327478359,
        0.002616087948355706,
        0.002642690823920354,
        0.002563735013797491,
        0.002376066302418550,
        0.002080771437683310,
        0.001683380373835325,
        0.001193898960778118,
        0.000626661579023735,
        -0.000000000000000002,
        -0.000664267988276606,
        -0.001341519183949390,
        -0.002005156417901405,
        -0.002627565471459726,
        -0.003181165793748674,
        -0.003639518021235242,
        -0.003978447204493652,
        -0.004177137994692177,
        -0.004219157001951925,
        -0.004093358218837291,
        -0.003794629849736377,
        -0.003324445077236724,
        -0.002691185136320241,
        -0.001910210394165731,
        -0.001003663720868103,
        0.000000000000000002,
        0.001066754165270402,
        0.002157996014694932,
        0.003231772566350213,
        0.004244202191827137,
        0.005151048179219079,
        0.005909393005288565,
        0.006479356040226374,
        0.006825793324039799,
        0.006919916103695524,
        0.006740765151169225,
        0.006276480558838687,
        0.005525311707615900,
        0.004496319313858125,
        0.003209730685911514,
        0.001696920281344936,
        -0.000000000000000002,
        -0.001828983036848869,
        -0.003729229644549646,
        -0.005632727246857865,
        -0.007466105274645931,
        -0.009152756123334908,
        -0.010615159575526969,
        -0.011777339557695950,
        -0.012567375321989019,
        -0.012919884923765518,
        -0.012778397412953458,
        -0.012097531586649524,
        -0.010844903473169741,
        -0.009002691840841206,
        -0.006568800752070329,
        -0.003557570221038989,
        0.000000000000000002,
        0.004056533042681024,
        0.008549067096914640,
        0.013400343493479750,
        0.018520560447081374,
        0.023809546375107637,
        0.029159292198165945,
        0.034456769367789762,
        0.039586950014967481,
        0.044435937953486930,
        0.048894114595758952,
        0.052859202333889986,
        0.056239149682753918,
        0.058954747437924289,
        0.060941893119321591,
        0.062153431792391967,
        0.062560514623839339,
        0.062153431792391967,
        0.060941893119321591,
        0.058954747437924289,
        0.056239149682753918,
        0.052859202333889986,
        0.048894114595758952,
        0.044435937953486937,
        0.039586950014967481,
        0.034456769367789769,
        0.029159292198165945,
        0.023809546375107637,
        0.018520560447081374,
        0.013400343493479749,
        0.008549067096914640,
        0.004056533042681024,
        0.000000000000000002,
        -0.003557570221038989,
        -0.006568800752070330,
        -0.009002691840841206,
        -0.010844903473169742,
        -0.012097531586649526,
        -0.012778397412953458,
        -0.012919884923765518,
        -0.012567375321989017,
        -0.011777339557695950,
        -0.010615159575526969,
        -0.009152756123334908,
        -0.007466105274645932,
        -0.005632727246857866,
        -0.003729229644549647,
        -0.001828983036848869,
        -0.000000000000000002,
        0.001696920281344936,
        0.003209730685911514,
        0.004496319313858125,
        0.005525311707615900,
        0.006276480558838687,
        0.006740765151169227,
        0.006919916103695524,
        0.006825793324039799,
        0.006479356040226376,
        0.005909393005288566,
        0.005151048179219080,
        0.004244202191827136,
        0.003231772566350212,
        0.002157996014694932,
        0.001066754165270402,
        0.000000000000000002,
        -0.001003663720868103,
        -0.001910210394165732,
        -0.002691185136320241,
        -0.003324445077236724,
        -0.003794629849736378,
        -0.004093358218837290,
        -0.004219157001951924,
        -0.004177137994692177,
        -0.003978447204493652,
        -0.003639518021235244,
        -0.003181165793748675,
        -0.002627565471459726,
        -0.002005156417901405,
        -0.001341519183949390,
        -0.000664267988276606,
        -0.000000000000000002,
        0.000626661579023735,
        0.001193898960778118,
        0.001683380373835325,
        0.002080771437683311,
        0.002376066302418551,
        0.002563735013797492,
        0.002642690823920355,
        0.002616087948355706,
        0.002490966327478359,
        0.002277765077871211,
        0.001989730358690072,
        0.001642246217551685,
        0.001252118562650433,
        0.000836842726790481,
        0.000413884189792075,
        0.000000000000000001,
        -0.000389374583756716,
        -0.000740653554486260,
        -0.001042525528293657,
        -0.001286265733142097,
        -0.001465928433965474,
        -0.001578418713511394,
        -0.001623447413179942,
        -0.001603377519727205,
        -0.001522974199559374,
        -0.001389073900754881,
        -0.001210190367073162,
        -0.000996076978507558,
        -0.000757265527998974,
        -0.000504601379611034,
        -0.000248793980562997,
        -0.000000000000000001,
        0.000232545950468093,
        0.000440840866811561,
        0.000618354179571175,
        0.000760194214492157,
        0.000863198039210445,
        0.000925945744341799,
        0.000948703270084566,
        0.000933300602487195,
        0.000882954431367312,
        0.000802046113142232,
        0.000695866971189180,
        0.000570343575108129,
        0.000431755675842870,
        0.000286458967915836,
        0.000140623856733193,
        0.000000000000000001,
        -0.000130285346110805,
        -0.000245889117540503,
        -0.000343370416539428,
        -0.000420262854291121,
        -0.000475101521175321,
        -0.000507406767087876,
        -0.000517628670667054,
        -0.000507057485130843,
        -0.000477706425647339,
        -0.000432173882488592,
        -0.000373492497407117,
        -0.000304972536819003,
        -0.000230046659486877,
        -0.000152122547287316,
        -0.000074448995301896,
        0.000000000000000000,
        0.000068619795333542,
        0.000129246175997619,
        0.000180202062131893,
        0.000220320124299626,
        0.000248942640707194,
        0.000265900825810743,
        0.000271476570048707,
        0.000266350033569904,
        0.000251536825581370,
        0.000228318579312604,
        0.000198170615150148,
        0.000162690094940290,
        0.000123527639790934,
        0.000082324848110496,
        0.000040659549186593,
        0.000000000000000000,
        -0.000038331382782603,
        -0.000073184733227011,
        -0.000103600360887381,
        -0.000128818158707271,
        -0.000148279947657231,
        -0.000161626077782218,
        -0.000168687654090666,
        -0.000169475695999539,
        -0.000164168386245181,
        -0.000153097339934155,
        -0.000136733551123474,
    };

    const uint16_t K = sizeof(h);

    // Apply the filter to the data (down-sample) 
    // Please see https://en.wikipedia.org/wiki/Downsampling_(signal_processing)
    const unsigned int M = 16;
    downSampleCount = sampleCount / M;
    cout << "C " << downSampleCount << endl;
    const unsigned int downSampleFreq = sampleFreq / M;

    for (unsigned int n = 0; n < 32; n++) {
        downSamples[n] = 0;
        for (unsigned int k = 0; k < K; k++) {
            int16_t n_minus_k = (n * M) - k;
            if (n_minus_k < 0) {
                n_minus_k = 0;
            }
            cout << samples[n_minus_k] << endl;
            downSamples[n] += (h[k] * samples[n_minus_k]);
        }
    }

    return 0;

    for (unsigned int i = 0; i < downSampleCount; i++) {
        cout << i << " " << downSamples[i] << endl;
    }


    // Write it out
    ofstream downFile("demo/AK1WI-SCAMP-40m-2000.txt");
    for (unsigned int i = 0; i < downSampleCount; i++) {
        downFile << downSamples[i] << endl;
    }
    downFile.close();
}
